{"paragraphs":[{"title":"Download CSV flight data file ","text":"%sh\n\n# You will now download a subset of 2008 flights (only 100k lines)\n# The full dataset may be found here: http://stat-computing.org/dataexpo/2009/the-data.html\n\nwget https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv -O /tmp/flights.csv\necho \"Downloaded!\"","user":"anonymous","dateUpdated":"2018-04-24T14:49:28-0400","config":{"tableHide":false,"editorSetting":{"editOnDblClick":false,"language":"sh"},"editorMode":"ace/mode/sh","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"--2018-04-24 14:49:28--  https://raw.githubusercontent.com/roberthryniewicz/datasets/master/airline-dataset/flights/flights.csv\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.200.133\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.200.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 9719582 (9.3M) [text/plain]\nSaving to: ‘/tmp/flights.csv’\n\n     0K .......... .......... .......... .......... ..........  0% 1.92M 5s\n    50K .......... .......... .......... .......... ..........  1% 3.36M 4s\n   100K .......... .......... .......... .......... ..........  1% 6.19M 3s\n   150K .......... .......... .......... .......... ..........  2% 6.11M 3s\n   200K .......... .......... .......... .......... ..........  2% 4.70M 2s\n   250K .......... .......... .......... .......... ..........  3% 5.64M 2s\n   300K .......... .......... .......... .......... ..........  3% 5.57M 2s\n   350K .......... .......... .......... .......... ..........  4% 6.39M 2s\n   400K .......... .......... .......... .......... ..........  4% 3.58M 2s\n   450K .......... .......... .......... .......... ..........  5% 6.64M 2s\n   500K .......... .......... .......... .......... ..........  5% 5.67M 2s\n   550K .......... .......... .......... .......... ..........  6% 6.28M 2s\n   600K .......... .......... .......... .......... ..........  6% 3.71M 2s\n   650K .......... .......... .......... .......... ..........  7% 7.20M 2s\n   700K .......... .......... .......... .......... ..........  7% 5.01M 2s\n   750K .......... .......... .......... .......... ..........  8% 6.88M 2s\n   800K .......... .......... .......... .......... ..........  8% 5.88M 2s\n   850K .......... .......... .......... .......... ..........  9% 6.51M 2s\n   900K .......... .......... .......... .......... .......... 10% 9.26M 2s\n   950K .......... .......... .......... .......... .......... 10% 4.33M 2s\n  1000K .......... .......... .......... .......... .......... 11% 7.67M 2s\n  1050K .......... .......... .......... .......... .......... 11% 8.58M 2s\n  1100K .......... .......... .......... .......... .......... 12% 7.61M 2s\n  1150K .......... .......... .......... .......... .......... 12% 7.84M 2s\n  1200K .......... .......... .......... .......... .......... 13% 5.55M 2s\n  1250K .......... .......... .......... .......... .......... 13% 13.0M 1s\n  1300K .......... .......... .......... .......... .......... 14% 3.60M 1s\n  1350K .......... .......... .......... .......... .......... 14% 9.24M 1s\n  1400K .......... .......... .......... .......... .......... 15% 7.86M 1s\n  1450K .......... .......... .......... .......... .......... 15% 5.79M 1s\n  1500K .......... .......... .......... .......... .......... 16% 10.8M 1s\n  1550K .......... .......... .......... .......... .......... 16% 8.08M 1s\n  1600K .......... .......... .......... .......... .......... 17% 4.61M 1s\n  1650K .......... .......... .......... .......... .......... 17% 6.75M 1s\n  1700K .......... .......... .......... .......... .......... 18% 10.7M 1s\n  1750K .......... .......... .......... .......... .......... 18% 10.0M 1s\n  1800K .......... .......... .......... .......... .......... 19% 5.17M 1s\n  1850K .......... .......... .......... .......... .......... 20% 8.86M 1s\n  1900K .......... .......... .......... .......... .......... 20% 5.84M 1s\n  1950K .......... .......... .......... .......... .......... 21% 10.6M 1s\n  2000K .......... .......... .......... .......... .......... 21% 8.09M 1s\n  2050K .......... .......... .......... .......... .......... 22% 10.4M 1s\n  2100K .......... .......... .......... .......... .......... 22% 7.38M 1s\n  2150K .......... .......... .......... .......... .......... 23% 1.91M 1s\n  2200K .......... .......... .......... .......... .......... 23% 6.42M 1s\n  2250K .......... .......... .......... .......... .......... 24% 12.5M 1s\n  2300K .......... .......... .......... .......... .......... 24% 10.7M 1s\n  2350K .......... .......... .......... .......... .......... 25% 5.67M 1s\n  2400K .......... .......... .......... .......... .......... 25% 2.98M 1s\n  2450K .......... .......... .......... .......... .......... 26% 30.3M 1s\n  2500K .......... .......... .......... .......... .......... 26% 8.17M 1s\n  2550K .......... .......... .......... .......... .......... 27% 5.99M 1s\n  2600K .......... .......... .......... .......... .......... 27% 7.24M 1s\n  2650K .......... .......... .......... .......... .......... 28% 40.9M 1s\n  2700K .......... .......... .......... .......... .......... 28% 10.6M 1s\n  2750K .......... .......... .......... .......... .......... 29% 5.04M 1s\n  2800K .......... .......... .......... .......... .......... 30% 8.55M 1s\n  2850K .......... .......... .......... .......... .......... 30% 9.45M 1s\n  2900K .......... .......... .......... .......... .......... 31% 10.0M 1s\n  2950K .......... .......... .......... .......... .......... 31% 11.3M 1s\n  3000K .......... .......... .......... .......... .......... 32% 9.61M 1s\n  3050K .......... .......... .......... .......... .......... 32% 9.04M 1s\n  3100K .......... .......... .......... .......... .......... 33% 12.8M 1s\n  3150K .......... .......... .......... .......... .......... 33% 9.18M 1s\n  3200K .......... .......... .......... .......... .......... 34% 6.94M 1s\n  3250K .......... .......... .......... .......... .......... 34% 10.2M 1s\n  3300K .......... .......... .......... .......... .......... 35% 9.61M 1s\n  3350K .......... .......... .......... .......... .......... 35% 6.86M 1s\n  3400K .......... .......... .......... .......... .......... 36% 11.8M 1s\n  3450K .......... .......... .......... .......... .......... 36% 10.7M 1s\n  3500K .......... .......... .......... .......... .......... 37% 3.90M 1s\n  3550K .......... .......... .......... .......... .......... 37% 12.9M 1s\n  3600K .......... .......... .......... .......... .......... 38% 5.56M 1s\n  3650K .......... .......... .......... .......... .......... 38% 13.5M 1s\n  3700K .......... .......... .......... .......... .......... 39% 11.3M 1s\n  3750K .......... .......... .......... .......... .......... 40% 11.6M 1s\n  3800K .......... .......... .......... .......... .......... 40% 7.70M 1s\n  3850K .......... .......... .......... .......... .......... 41% 11.8M 1s\n  3900K .......... .......... .......... .......... .......... 41% 8.68M 1s\n  3950K .......... .......... .......... .......... .......... 42% 8.59M 1s\n  4000K .......... .......... .......... .......... .......... 42% 6.08M 1s\n  4050K .......... .......... .......... .......... .......... 43% 10.8M 1s\n  4100K .......... .......... .......... .......... .......... 43% 11.1M 1s\n  4150K .......... .......... .......... .......... .......... 44% 11.0M 1s\n  4200K .......... .......... .......... .......... .......... 44% 12.8M 1s\n  4250K .......... .......... .......... .......... .......... 45% 10.5M 1s\n  4300K .......... .......... .......... .......... .......... 45% 11.2M 1s\n  4350K .......... .......... .......... .......... .......... 46% 6.71M 1s\n  4400K .......... .......... .......... .......... .......... 46% 10.0M 1s\n  4450K .......... .......... .......... .......... .......... 47% 5.80M 1s\n  4500K .......... .......... .......... .......... .......... 47% 10.5M 1s\n  4550K .......... .......... .......... .......... .......... 48% 12.1M 1s\n  4600K .......... .......... .......... .......... .......... 48% 13.2M 1s\n  4650K .......... .......... .......... .......... .......... 49% 9.80M 1s\n  4700K .......... .......... .......... .......... .......... 50% 11.6M 1s\n  4750K .......... .......... .......... .......... .......... 50% 8.05M 1s\n  4800K .......... .......... .......... .......... .......... 51% 8.14M 1s\n  4850K .......... .......... .......... .......... .......... 51% 12.5M 1s\n  4900K .......... .......... .......... .......... .......... 52% 6.53M 1s\n  4950K .......... .......... .......... .......... .......... 52% 7.74M 1s\n  5000K .......... .......... .......... .......... .......... 53% 7.76M 1s\n  5050K .......... .......... .......... .......... .......... 53% 9.52M 1s\n  5100K .......... .......... .......... .......... .......... 54% 11.4M 1s\n  5150K .......... .......... .......... .......... .......... 54% 13.5M 1s\n  5200K .......... .......... .......... .......... .......... 55% 7.28M 1s\n  5250K .......... .......... .......... .......... .......... 55% 11.9M 1s\n  5300K .......... .......... .......... .......... .......... 56% 10.6M 1s\n  5350K .......... .......... .......... .......... .......... 56% 12.4M 1s\n  5400K .......... .......... .......... .......... .......... 57% 11.9M 1s\n  5450K .......... .......... .......... .......... .......... 57% 7.24M 1s\n  5500K .......... .......... .......... .......... .......... 58% 9.84M 1s\n  5550K .......... .......... .......... .......... .......... 58% 12.3M 1s\n  5600K .......... .......... .......... .......... .......... 59% 9.21M 1s\n  5650K .......... .......... .......... .......... .......... 60% 11.7M 1s\n  5700K .......... .......... .......... .......... .......... 60% 12.1M 0s\n  5750K .......... .......... .......... .......... .......... 61% 7.54M 0s\n  5800K .......... .......... .......... .......... .......... 61% 7.52M 0s\n  5850K .......... .......... .......... .......... .......... 62% 13.4M 0s\n  5900K .......... .......... .......... .......... .......... 62% 12.7M 0s\n  5950K .......... .......... .......... .......... .......... 63% 11.5M 0s\n  6000K .......... .......... .......... .......... .......... 63% 3.20M 0s\n  6050K .......... .......... .......... .......... .......... 64% 8.82M 0s\n  6100K .......... .......... .......... .......... .......... 64% 10.5M 0s\n  6150K .......... .......... .......... .......... .......... 65% 12.7M 0s\n  6200K .......... .......... .......... .......... .......... 65% 12.0M 0s\n  6250K .......... .......... .......... .......... .......... 66% 12.6M 0s\n  6300K .......... .......... .......... .......... .......... 66% 10.1M 0s\n  6350K .......... .......... .......... .......... .......... 67% 11.0M 0s\n  6400K .......... .......... .......... .......... .......... 67% 6.02M 0s\n  6450K .......... .......... .......... .......... .......... 68% 11.6M 0s\n  6500K .......... .......... .......... .......... .......... 69% 10.2M 0s\n  6550K .......... .......... .......... .......... .......... 69% 11.1M 0s\n  6600K .......... .......... .......... .......... .......... 70% 10.8M 0s\n  6650K .......... .......... .......... .......... .......... 70% 7.17M 0s\n  6700K .......... .......... .......... .......... .......... 71% 7.82M 0s\n  6750K .......... .......... .......... .......... .......... 71% 9.91M 0s\n  6800K .......... .......... .......... .......... .......... 72% 8.17M 0s\n  6850K .......... .......... .......... .......... .......... 72% 12.6M 0s\n  6900K .......... .......... .......... .......... .......... 73% 10.6M 0s\n  6950K .......... .......... .......... .......... .......... 73% 11.4M 0s\n  7000K .......... .......... .......... .......... .......... 74% 11.8M 0s\n  7050K .......... .......... .......... .......... .......... 74% 12.1M 0s\n  7100K .......... .......... .......... .......... .......... 75% 13.0M 0s\n  7150K .......... .......... .......... .......... .......... 75% 7.70M 0s\n  7200K .......... .......... .......... .......... .......... 76% 8.88M 0s\n  7250K .......... .......... .......... .......... .......... 76% 12.3M 0s\n  7300K .......... .......... .......... .......... .......... 77% 10.2M 0s\n  7350K .......... .......... .......... .......... .......... 77% 12.1M 0s\n  7400K .......... .......... .......... .......... .......... 78% 11.3M 0s\n  7450K .......... .......... .......... .......... .......... 79% 6.84M 0s\n  7500K .......... .......... .......... .......... .......... 79% 11.2M 0s\n  7550K .......... .......... .......... .......... .......... 80% 14.3M 0s\n  7600K .......... .......... .......... .......... .......... 80% 8.77M 0s\n  7650K .......... .......... .......... .......... .......... 81% 6.37M 0s\n  7700K .......... .......... .......... .......... .......... 81% 7.17M 0s\n  7750K .......... .......... .......... .......... .......... 82% 12.2M 0s\n  7800K .......... .......... .......... .......... .......... 82% 6.96M 0s\n  7850K .......... .......... .......... .......... .......... 83% 11.0M 0s\n  7900K .......... .......... .......... .......... .......... 83% 12.6M 0s\n  7950K .......... .......... .......... .......... .......... 84% 11.2M 0s\n  8000K .......... .......... .......... .......... .......... 84% 1.91M 0s\n  8050K .......... .......... .......... .......... .......... 85% 56.1M 0s\n  8100K .......... .......... .......... .......... .......... 85% 11.8M 0s\n  8150K .......... .......... .......... .......... .......... 86% 11.5M 0s\n  8200K .......... .......... .......... .......... .......... 86% 11.3M 0s\n  8250K .......... .......... .......... .......... .......... 87% 11.1M 0s\n  8300K .......... .......... .......... .......... .......... 87% 6.93M 0s\n  8350K .......... .......... .......... .......... .......... 88% 12.4M 0s\n  8400K .......... .......... .......... .......... .......... 89% 7.61M 0s\n  8450K .......... .......... .......... .......... .......... 89% 6.84M 0s\n  8500K .......... .......... .......... .......... .......... 90% 11.6M 0s\n  8550K .......... .......... .......... .......... .......... 90% 11.1M 0s\n  8600K .......... .......... .......... .......... .......... 91% 12.4M 0s\n  8650K .......... .......... .......... .......... .......... 91% 11.5M 0s\n  8700K .......... .......... .......... .......... .......... 92% 7.25M 0s\n  8750K .......... .......... .......... .......... .......... 92% 12.0M 0s\n  8800K .......... .......... .......... .......... .......... 93% 8.53M 0s\n  8850K .......... .......... .......... .......... .......... 93% 13.8M 0s\n  8900K .......... .......... .......... .......... .......... 94% 6.86M 0s\n  8950K .......... .......... .......... .......... .......... 94% 11.5M 0s\n  9000K .......... .......... .......... .......... .......... 95% 11.3M 0s\n  9050K .......... .......... .......... .......... .......... 95% 13.1M 0s\n  9100K .......... .......... .......... .......... .......... 96% 9.93M 0s\n  9150K .......... .......... .......... .......... .......... 96% 8.18M 0s\n  9200K .......... .......... .......... .......... .......... 97% 9.25M 0s\n  9250K .......... .......... .......... .......... .......... 97% 11.8M 0s\n  9300K .......... .......... .......... .......... .......... 98% 8.35M 0s\n  9350K .......... .......... .......... .......... .......... 99% 11.7M 0s\n  9400K .......... .......... .......... .......... .......... 99% 9.77M 0s\n  9450K .......... .......... .......... .......... .         100% 13.9M=1.2s\n\n2018-04-24 14:49:30 (7.98 MB/s) - ‘/tmp/flights.csv’ saved [9719582/9719582]\n\nDownloaded!\n"}]},"apps":[],"jobName":"paragraph_1524594946761_-1612649141","id":"20160410-003138_1540125404","dateCreated":"2018-04-24T14:35:46-0400","dateStarted":"2018-04-24T14:49:28-0400","dateFinished":"2018-04-24T14:49:30-0400","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4389"},{"title":"Preview Downloaded File","text":"%sh\n\ncat /tmp/flights.csv | head","dateUpdated":"2018-04-24T14:49:33-0400","config":{"tableHide":false,"editorSetting":{"editOnDblClick":false,"language":"sh"},"editorMode":"ace/mode/sh","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946762_-1611494894","id":"20160410-003138_226044813","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4390","user":"anonymous","dateFinished":"2018-04-24T14:49:34-0400","dateStarted":"2018-04-24T14:49:34-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Year,Month,DayofMonth,DayOfWeek,DepTime,CRSDepTime,ArrTime,CRSArrTime,UniqueCarrier,FlightNum,TailNum,ActualElapsedTime,CRSElapsedTime,AirTime,ArrDelay,DepDelay,Origin,Dest,Distance,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay\n2008,1,3,4,2003,1955,2211,2225,WN,335,N712SW,128,150,116,-14,8,IAD,TPA,810,4,8,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,754,735,1002,1000,WN,3231,N772SW,128,145,113,2,19,IAD,TPA,810,5,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,628,620,804,750,WN,448,N428WN,96,90,76,14,8,IND,BWI,515,3,17,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,926,930,1054,1100,WN,1746,N612SW,88,90,78,-6,-4,IND,BWI,515,3,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1829,1755,1959,1925,WN,3920,N464WN,90,90,77,34,34,IND,BWI,515,3,10,0,,0,2,0,0,0,32\n2008,1,3,4,1940,1915,2121,2110,WN,378,N726SW,101,115,87,11,25,IND,JAX,688,4,10,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,1937,1830,2037,1940,WN,509,N763SW,240,250,230,57,67,IND,LAS,1591,3,7,0,,0,10,0,0,0,47\n2008,1,3,4,1039,1040,1132,1150,WN,535,N428WN,233,250,219,-18,-1,IND,LAS,1591,7,7,0,,0,NA,NA,NA,NA,NA\n2008,1,3,4,617,615,652,650,WN,11,N689SW,95,95,70,2,2,IND,MCI,451,6,19,0,,0,NA,NA,NA,NA,NA\n"}]}},{"title":"Move dataset to HDFS (if supported/available)","text":"%sh\n\n# remove existing copies of dataset from HDFS\nhdfs dfs -rm -r -f /tmp/flights.csv\n\n# put data into HDFS\nhdfs dfs -put /tmp/flights.csv /tmp/","dateUpdated":"2018-04-24T14:49:38-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sh"},"editorMode":"ace/mode/sh","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946762_-1611494894","id":"20160410-003138_1267267737","dateCreated":"2018-04-24T14:35:46-0400","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:4391","user":"anonymous","dateFinished":"2018-04-24T14:49:38-0400","dateStarted":"2018-04-24T14:49:38-0400","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"bash: line 1: hdfs: command not found\nbash: line 4: hdfs: command not found\n"},{"type":"TEXT","data":"ExitValue: 127"}]}},{"title":"Create a DataFrame from CSV file","text":"%spark\n\n// Create a flights DataFrame from CSV file\nval flights = spark.read\n              .option(\"header\", \"true\")                              // Use first line as header\n              .option(\"inferSchema\", \"true\")                         // Infer schema\n              .csv(\"/tmp/flights.csv\")                               // Read data","dateUpdated":"2018-04-24T14:49:56-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946762_-1611494894","id":"20160410-003138_236600548","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4392","user":"anonymous","dateFinished":"2018-04-24T14:50:10-0400","dateStarted":"2018-04-24T14:49:56-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"flights: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 27 more fields]\n"}]}},{"title":"Print Schema","text":"%spark\n\n// Print the schema in a tree format\nflights.printSchema()","dateUpdated":"2018-04-24T14:51:12-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":5,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":458,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946763_-1611879643","id":"20160410-003138_1553179639","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4393","user":"anonymous","dateFinished":"2018-04-24T14:50:18-0400","dateStarted":"2018-04-24T14:50:18-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- Year: integer (nullable = true)\n |-- Month: integer (nullable = true)\n |-- DayofMonth: integer (nullable = true)\n |-- DayOfWeek: integer (nullable = true)\n |-- DepTime: string (nullable = true)\n |-- CRSDepTime: integer (nullable = true)\n |-- ArrTime: string (nullable = true)\n |-- CRSArrTime: integer (nullable = true)\n |-- UniqueCarrier: string (nullable = true)\n |-- FlightNum: integer (nullable = true)\n |-- TailNum: string (nullable = true)\n |-- ActualElapsedTime: string (nullable = true)\n |-- CRSElapsedTime: integer (nullable = true)\n |-- AirTime: string (nullable = true)\n |-- ArrDelay: string (nullable = true)\n |-- DepDelay: string (nullable = true)\n |-- Origin: string (nullable = true)\n |-- Dest: string (nullable = true)\n |-- Distance: integer (nullable = true)\n |-- TaxiIn: string (nullable = true)\n |-- TaxiOut: string (nullable = true)\n |-- Cancelled: integer (nullable = true)\n |-- CancellationCode: string (nullable = true)\n |-- Diverted: integer (nullable = true)\n |-- CarrierDelay: string (nullable = true)\n |-- WeatherDelay: string (nullable = true)\n |-- NASDelay: string (nullable = true)\n |-- SecurityDelay: string (nullable = true)\n |-- LateAircraftDelay: string (nullable = true)\n\n"}]}},{"title":"Dataset Description","text":"%angular\n\n<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 70%;\n}\n\ntd, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\n\ntr:nth-child(even) {\n    background-color: #dddddd;\n}\n</style>\n</head>\n\n<table width=\"100%\">\n<tbody><tr>\n  <th></th>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n <td>1  </td><td> Year              </td><td>1987-2008</td>\n</tr><tr>\n <td>2  </td><td> Month             </td><td>1-12</td>\n</tr><tr>\n <td>3  </td><td> DayofMonth        </td><td>1-31</td>\n</tr><tr>\n <td>4  </td><td> DayOfWeek         </td><td>1 (Monday) - 7 (Sunday)</td>\n</tr><tr>\n <td>5  </td><td> DepTime           </td><td>actual departure time (local, hhmm)</td>\n</tr><tr>\n <td>6  </td><td> CRSDepTime        </td><td>scheduled departure time (local, hhmm)</td>\n</tr><tr>\n <td>7  </td><td> ArrTime           </td><td>actual arrival time (local, hhmm)</td>\n</tr><tr>\n <td>8  </td><td> CRSArrTime        </td><td>scheduled arrival time (local, hhmm)</td>\n</tr><tr>\n <td>9  </td><td> UniqueCarrier     </td><td><a href=\"supplemental-data.html\">unique carrier code</a></td>\n</tr><tr>\n <td>10 </td><td> FlightNum         </td><td>flight number</td>\n</tr><tr>\n <td>11 </td><td> TailNum           </td><td>plane tail number</td>\n</tr><tr>\n <td>12 </td><td> ActualElapsedTime </td><td>in minutes</td>\n</tr><tr>\n <td>13 </td><td> CRSElapsedTime    </td><td>in minutes</td>\n</tr><tr>\n <td>14 </td><td> AirTime           </td><td>in minutes</td>\n</tr><tr>\n <td>15 </td><td> ArrDelay          </td><td>arrival delay, in minutes</td>\n</tr><tr>\n <td>16 </td><td> DepDelay          </td><td>departure delay, in minutes</td>\n</tr><tr>\n <td>17 </td><td> Origin            </td><td>origin <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>18 </td><td> Dest              </td><td>destination <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>19 </td><td> Distance          </td><td>in miles</td>\n</tr><tr>\n <td>20 </td><td> TaxiIn            </td><td>taxi in time, in minutes</td>\n</tr><tr>\n <td>21 </td><td> TaxiOut           </td><td>taxi out time in minutes</td>\n</tr><tr>\n <td>22 </td><td> Cancelled           </td><td>was the flight cancelled?</td>\n</tr><tr>\n <td>23 </td><td> CancellationCode  </td><td>reason for cancellation (A = carrier, B = weather, C = NAS, D = security)</td>\n</tr><tr>\n <td>24 </td><td> Diverted          </td><td>1 = yes, 0 = no</td>\n</tr><tr>\n <td>25 </td><td> CarrierDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>26 </td><td> WeatherDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>27 </td><td> NASDelay          </td><td>in minutes</td>\n</tr><tr>\n <td>28 </td><td> SecurityDelay     </td><td>in minutes</td>\n</tr><tr>\n <td>29 </td><td> LateAircraftDelay </td><td>in minutes</td>\n</tr>\n</tbody></table>\n\n</body>\n</html>","dateUpdated":"2018-04-24T14:50:53-0400","config":{"editorSetting":{"editOnDblClick":true},"editorMode":"ace/mode/undefined","colWidth":7,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable {\n    font-family: arial, sans-serif;\n    border-collapse: collapse;\n    width: 70%;\n}\n\ntd, th {\n    border: 1px solid #dddddd;\n    text-align: left;\n    padding: 8px;\n}\n\ntr:nth-child(even) {\n    background-color: #dddddd;\n}\n</style>\n</head>\n\n<table width=\"100%\">\n<tbody><tr>\n  <th></th>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n <td>1  </td><td> Year              </td><td>1987-2008</td>\n</tr><tr>\n <td>2  </td><td> Month             </td><td>1-12</td>\n</tr><tr>\n <td>3  </td><td> DayofMonth        </td><td>1-31</td>\n</tr><tr>\n <td>4  </td><td> DayOfWeek         </td><td>1 (Monday) - 7 (Sunday)</td>\n</tr><tr>\n <td>5  </td><td> DepTime           </td><td>actual departure time (local, hhmm)</td>\n</tr><tr>\n <td>6  </td><td> CRSDepTime        </td><td>scheduled departure time (local, hhmm)</td>\n</tr><tr>\n <td>7  </td><td> ArrTime           </td><td>actual arrival time (local, hhmm)</td>\n</tr><tr>\n <td>8  </td><td> CRSArrTime        </td><td>scheduled arrival time (local, hhmm)</td>\n</tr><tr>\n <td>9  </td><td> UniqueCarrier     </td><td><a href=\"supplemental-data.html\">unique carrier code</a></td>\n</tr><tr>\n <td>10 </td><td> FlightNum         </td><td>flight number</td>\n</tr><tr>\n <td>11 </td><td> TailNum           </td><td>plane tail number</td>\n</tr><tr>\n <td>12 </td><td> ActualElapsedTime </td><td>in minutes</td>\n</tr><tr>\n <td>13 </td><td> CRSElapsedTime    </td><td>in minutes</td>\n</tr><tr>\n <td>14 </td><td> AirTime           </td><td>in minutes</td>\n</tr><tr>\n <td>15 </td><td> ArrDelay          </td><td>arrival delay, in minutes</td>\n</tr><tr>\n <td>16 </td><td> DepDelay          </td><td>departure delay, in minutes</td>\n</tr><tr>\n <td>17 </td><td> Origin            </td><td>origin <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>18 </td><td> Dest              </td><td>destination <a href=\"supplemental-data.html\">IATA airport code</a></td>\n</tr><tr>\n <td>19 </td><td> Distance          </td><td>in miles</td>\n</tr><tr>\n <td>20 </td><td> TaxiIn            </td><td>taxi in time, in minutes</td>\n</tr><tr>\n <td>21 </td><td> TaxiOut           </td><td>taxi out time in minutes</td>\n</tr><tr>\n <td>22 </td><td> Cancelled           </td><td>was the flight cancelled?</td>\n</tr><tr>\n <td>23 </td><td> CancellationCode  </td><td>reason for cancellation (A = carrier, B = weather, C = NAS, D = security)</td>\n</tr><tr>\n <td>24 </td><td> Diverted          </td><td>1 = yes, 0 = no</td>\n</tr><tr>\n <td>25 </td><td> CarrierDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>26 </td><td> WeatherDelay      </td><td>in minutes</td>\n</tr><tr>\n <td>27 </td><td> NASDelay          </td><td>in minutes</td>\n</tr><tr>\n <td>28 </td><td> SecurityDelay     </td><td>in minutes</td>\n</tr><tr>\n <td>29 </td><td> LateAircraftDelay </td><td>in minutes</td>\n</tr>\n</tbody></table>\n\n</body>\n</html>"}]},"apps":[],"jobName":"paragraph_1524594946763_-1611879643","id":"20160410-003138_1626463388","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4394"},{"text":"%md\n### Part 1: Using DataFrame/Dataset API to Analyze the Airline Data\n\nNote: in this lab DataFrame and Dataset API calls will be indistinguishable. Internally, however, *flights* are represented as DataFrames and *delayedFlights* as Datasets in the examples below.","dateUpdated":"2018-04-24T14:55:47-0400","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Part 1: Using DataFrame/Dataset API to Analyze the Airline Data</h3>\n<p>Note: in this lab DataFrame and Dataset API calls will be indistinguishable. Internally, however, <em>flights</em> are represented as DataFrames and <em>delayedFlights</em> as Datasets in the examples below.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946763_-1611879643","id":"20160410-003138_650819453","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4395","user":"anonymous","dateFinished":"2018-04-24T14:55:47-0400","dateStarted":"2018-04-24T14:55:47-0400"},{"title":"Show a subset of columns","text":"%spark\n\n// Show a subset of columns with \"select\"\nflights.select(\"UniqueCarrier\", \"FlightNum\", \"DepDelay\", \"ArrDelay\", \"Distance\").show()","dateUpdated":"2018-04-24T14:55:50-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946764_-1613803388","id":"20160410-003138_1188332400","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4396","user":"anonymous","dateFinished":"2018-04-24T14:55:51-0400","dateStarted":"2018-04-24T14:55:50-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------+---------+--------+--------+--------+\n|UniqueCarrier|FlightNum|DepDelay|ArrDelay|Distance|\n+-------------+---------+--------+--------+--------+\n|           WN|      335|       8|     -14|     810|\n|           WN|     3231|      19|       2|     810|\n|           WN|      448|       8|      14|     515|\n|           WN|     1746|      -4|      -6|     515|\n|           WN|     3920|      34|      34|     515|\n|           WN|      378|      25|      11|     688|\n|           WN|      509|      67|      57|    1591|\n|           WN|      535|      -1|     -18|    1591|\n|           WN|       11|       2|       2|     451|\n|           WN|      810|       0|     -16|     451|\n|           WN|      100|       6|       1|     828|\n|           WN|     1333|      94|      80|     828|\n|           WN|      829|      -4|       1|     162|\n|           WN|     1016|       0|      10|     162|\n|           WN|     1827|       2|      -4|     162|\n|           WN|     2272|       9|      11|     162|\n|           WN|      675|      27|      15|    1489|\n|           WN|     1144|       9|     -15|    1489|\n|           WN|        4|      28|      16|     838|\n|           WN|       54|      51|      37|     220|\n+-------------+---------+--------+--------+--------+\nonly showing top 20 rows\n\n"}]}},{"title":"Apply a filter to find flights delayed more than 15 min","text":"%spark\n\n// Create a Dataset containing flights with delayed departure by more than 15 min using \"filter\"\nval delayedFlights = flights\n                        .select(\"UniqueCarrier\", \"DepDelay\")\n                        .filter($\"DepDelay\" > 15)\n                        \ndelayedFlights.show()","dateUpdated":"2018-04-24T14:55:57-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946764_-1613803388","id":"20160410-003138_704729700","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4397","user":"anonymous","dateFinished":"2018-04-24T14:55:58-0400","dateStarted":"2018-04-24T14:55:57-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"delayedFlights: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [UniqueCarrier: string, DepDelay: string]\n+-------------+--------+\n|UniqueCarrier|DepDelay|\n+-------------+--------+\n|           WN|      19|\n|           WN|      34|\n|           WN|      25|\n|           WN|      67|\n|           WN|      94|\n|           WN|      27|\n|           WN|      28|\n|           WN|      51|\n|           WN|      32|\n|           WN|      20|\n|           WN|      25|\n|           WN|      87|\n|           WN|      29|\n|           WN|      82|\n|           WN|      19|\n|           WN|      39|\n|           WN|      82|\n|           WN|      22|\n|           WN|      29|\n|           WN|      56|\n+-------------+--------+\nonly showing top 20 rows\n\n"}]}},{"title":"Display percentage of delayed flights","text":"%spark\n\nval numTotalFlights = flights.count()\nval numDelayedFlights = delayedFlights.count()\n\n// Print total number of delayed flights\nprintln(\"Percentage of Delayed Flights: \" + (numDelayedFlights.toFloat/numTotalFlights*100) + \"%\")","dateUpdated":"2018-04-24T14:56:02-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946765_-1614188137","id":"20160410-003138_1019754695","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4398","user":"anonymous","dateFinished":"2018-04-24T14:56:03-0400","dateStarted":"2018-04-24T14:56:02-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"numTotalFlights: Long = 100000\nnumDelayedFlights: Long = 19587\nPercentage of Delayed Flights: 19.587%\n"}]}},{"text":"%md\n\nWe can also create a user defined function (UDF) to determine delays.","dateUpdated":"2018-04-24T14:56:07-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We can also create a user defined function (UDF) to determine delays.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946765_-1614188137","id":"20161017-203635_1855560775","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4399","user":"anonymous","dateFinished":"2018-04-24T14:56:07-0400","dateStarted":"2018-04-24T14:56:07-0400"},{"title":" Create a UDF to determine delays","text":"%spark\n\nimport org.apache.spark.sql.functions.udf\n\n// Define a UDF to find delayed flights\n\n// Assume:\n//  if ArrDelay is not available then Delayed = False\n//  if ArrDelay > 15 min then Delayed = True else False\n\nval isDelayedUDF = udf((time: String) => if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0)","dateUpdated":"2018-04-24T14:56:08-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946766_-1613033890","id":"20161017-203017_1781904338","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4400","user":"anonymous","dateFinished":"2018-04-24T14:56:09-0400","dateStarted":"2018-04-24T14:56:08-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.functions.udf\nisDelayedUDF: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\n"}]}},{"title":"Create a new DataFrame with IsDelayed column","text":"%spark\n\nval flightsWithDelays = flights.select($\"Year\", $\"Month\", $\"DayofMonth\", $\"UniqueCarrier\", $\"FlightNum\", $\"DepDelay\", \n                    isDelayedUDF($\"DepDelay\").alias(\"IsDelayed\"))\n                    \nflightsWithDelays.show(5)","dateUpdated":"2018-04-24T14:56:12-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946766_-1613033890","id":"20161017-203358_1309594443","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4401","user":"anonymous","dateFinished":"2018-04-24T14:56:13-0400","dateStarted":"2018-04-24T14:56:12-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"flightsWithDelays: org.apache.spark.sql.DataFrame = [Year: int, Month: int ... 5 more fields]\n+----+-----+----------+-------------+---------+--------+---------+\n|Year|Month|DayofMonth|UniqueCarrier|FlightNum|DepDelay|IsDelayed|\n+----+-----+----------+-------------+---------+--------+---------+\n|2008|    1|         3|           WN|      335|       8|        0|\n|2008|    1|         3|           WN|     3231|      19|        1|\n|2008|    1|         3|           WN|      448|       8|        0|\n|2008|    1|         3|           WN|     1746|      -4|        0|\n|2008|    1|         3|           WN|     3920|      34|        1|\n+----+-----+----------+-------------+---------+--------+---------+\nonly showing top 5 rows\n\n"}]}},{"text":"%md\n\n\nNote that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.","dateUpdated":"2018-04-24T14:56:15-0400","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Note that now we have a new table with a column that indicates whether a flight is delayed or not. This will allow us to calculate percentage of delayed flights in one pass.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946767_-1613418639","id":"20161017-205652_1397194952","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4402","user":"anonymous","dateFinished":"2018-04-24T14:56:15-0400","dateStarted":"2018-04-24T14:56:15-0400"},{"title":"Calculate percentage of delayed flights using flightsWithDelays DataFrame","text":"%spark\n\nflightsWithDelays.agg((sum(\"IsDelayed\") * 100 / count(\"DepDelay\")).alias(\"Percentage of Delayed Flights\")).show()","dateUpdated":"2018-04-24T14:56:16-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946767_-1613418639","id":"20161017-205750_819957102","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4403","user":"anonymous","dateFinished":"2018-04-24T14:56:17-0400","dateStarted":"2018-04-24T14:56:16-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------------------+\n|Percentage of Delayed Flights|\n+-----------------------------+\n|                       19.587|\n+-----------------------------+\n\n"}]}},{"text":"%md\n\nAs you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.\n\nNow let's explore our flights a bit more and find some averages.","dateUpdated":"2018-04-24T14:56:21-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>As you can see above, this is a very clean way of displaying a percentage of delayed flights. UDFs are useful in creating additional functions that are commonly used.</p>\n<p>Now let&rsquo;s explore our flights a bit more and find some averages.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946767_-1613418639","id":"20161017-205919_1405069576","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4404","user":"anonymous","dateFinished":"2018-04-24T14:56:21-0400","dateStarted":"2018-04-24T14:56:21-0400"},{"title":"Find Avg Taxi-in","text":"%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiIn\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiIn\")\n        .alias(\"AvgTaxiIn\"))\n        .orderBy(desc(\"AvgTaxiIn\"))\n        .show(10)","dateUpdated":"2018-04-24T14:56:24-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946767_-1613418639","id":"20160410-003138_1488719873","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4405","user":"anonymous","dateFinished":"2018-04-24T14:56:25-0400","dateStarted":"2018-04-24T14:56:24-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+----+------------------+\n|Origin|Dest|         AvgTaxiIn|\n+------+----+------------------+\n|   CLT| IAH|              22.0|\n|   IAH| ABQ|              18.0|\n|   MCI| IAH|14.666666666666666|\n|   BHM| EWR|              13.0|\n|   SMF| GEG|12.462962962962964|\n|   MHT| CLE|              12.0|\n|   CRW| IAH|              12.0|\n|   IAH| JAX|              11.0|\n|   ONT| COS|10.903225806451612|\n|   SMF| COS|10.610169491525424|\n+------+----+------------------+\nonly showing top 10 rows\n\n"}]}},{"title":"Find Avg Taxi-out","text":"%spark\n\nflights.select(\"Origin\", \"Dest\", \"TaxiOut\")\n        .groupBy(\"Origin\", \"Dest\")\n        .agg(avg(\"TaxiOut\")\n        .alias(\"AvgTaxiOut\"))\n        .orderBy(desc(\"AvgTaxiOut\"))\n        .show(10)","dateUpdated":"2018-04-24T14:56:26-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":6,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946767_-1613418639","id":"20160410-003138_840324935","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4406","user":"anonymous","dateFinished":"2018-04-24T14:56:27-0400","dateStarted":"2018-04-24T14:56:26-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+----+----------+\n|Origin|Dest|AvgTaxiOut|\n+------+----+----------+\n|   LCH| IAH|      84.0|\n|   EWR| BHM|      63.0|\n|   EWR| SDF|      45.0|\n|   EWR| GSO|      36.5|\n|   MHT| CLE|      33.0|\n|   EWR| JAX|      28.0|\n|   EWR| DTW|      27.0|\n|   CLE| SDF|      27.0|\n|   ORD| EWR|      26.0|\n|   EWR| MCI|      26.0|\n+------+----+----------+\nonly showing top 10 rows\n\n"}]}},{"text":"%md\n### Part 2: Using SQL API to Analyze the Airline Data","dateUpdated":"2018-04-24T14:56:31-0400","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Part 2: Using SQL API to Analyze the Airline Data</h3>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946768_-1603030419","id":"20160410-003138_582934314","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4407","user":"anonymous","dateFinished":"2018-04-24T14:56:31-0400","dateStarted":"2018-04-24T14:56:31-0400"},{"title":"Is there a more interactive way to display query results?","text":"%md\n\nAs you can see, the data displayed in Part 1 of this notebook isn't too interactive. To have a more dynamic experience, let's create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.\n\nNote that the temporary view will reside in memory as long as the Spark session is alive.","dateUpdated":"2018-04-24T14:56:33-0400","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>As you can see, the data displayed in Part 1 of this notebook isn&rsquo;t too interactive. To have a more dynamic experience, let&rsquo;s create a temporary (in-memory) view that we can query against and interact with the resulting data in a table or graph format. The temporary view will allow us to execute SQL queries against it.</p>\n<p>Note that the temporary view will reside in memory as long as the Spark session is alive.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946768_-1603030419","id":"20160410-003138_556617784","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4408","user":"anonymous","dateFinished":"2018-04-24T14:56:33-0400","dateStarted":"2018-04-24T14:56:33-0400"},{"title":"Register a Temporary View","text":"%spark\n\n// Convert flights DataFrame to a temporary view\nflights.createOrReplaceTempView(\"flightsView\")","dateUpdated":"2018-04-24T14:56:35-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946768_-1603030419","id":"20160410-003138_636329356","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4409","user":"anonymous","dateFinished":"2018-04-24T14:56:35-0400","dateStarted":"2018-04-24T14:56:35-0400","results":{"code":"SUCCESS","msg":[]}},{"title":"Preview Data in an interactive table format","text":"%sql\n\nSELECT * FROM flightsView LIMIT 20","dateUpdated":"2018-04-24T14:56:38-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"Year","index":0,"aggr":"sum"}],"values":[{"name":"Month","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"Year","index":0,"aggr":"sum"},"yAxis":{"name":"Month","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946768_-1603030419","id":"20160410-003138_318924232","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4410","user":"anonymous","dateFinished":"2018-04-24T14:56:38-0400","dateStarted":"2018-04-24T14:56:38-0400","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Year\tMonth\tDayofMonth\tDayOfWeek\tDepTime\tCRSDepTime\tArrTime\tCRSArrTime\tUniqueCarrier\tFlightNum\tTailNum\tActualElapsedTime\tCRSElapsedTime\tAirTime\tArrDelay\tDepDelay\tOrigin\tDest\tDistance\tTaxiIn\tTaxiOut\tCancelled\tCancellationCode\tDiverted\tCarrierDelay\tWeatherDelay\tNASDelay\tSecurityDelay\tLateAircraftDelay\n2008\t1\t3\t4\t2003\t1955\t2211\t2225\tWN\t335\tN712SW\t128\t150\t116\t-14\t8\tIAD\tTPA\t810\t4\t8\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t754\t735\t1002\t1000\tWN\t3231\tN772SW\t128\t145\t113\t2\t19\tIAD\tTPA\t810\t5\t10\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t628\t620\t804\t750\tWN\t448\tN428WN\t96\t90\t76\t14\t8\tIND\tBWI\t515\t3\t17\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t926\t930\t1054\t1100\tWN\t1746\tN612SW\t88\t90\t78\t-6\t-4\tIND\tBWI\t515\t3\t7\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1829\t1755\t1959\t1925\tWN\t3920\tN464WN\t90\t90\t77\t34\t34\tIND\tBWI\t515\t3\t10\t0\tnull\t0\t2\t0\t0\t0\t32\n2008\t1\t3\t4\t1940\t1915\t2121\t2110\tWN\t378\tN726SW\t101\t115\t87\t11\t25\tIND\tJAX\t688\t4\t10\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1937\t1830\t2037\t1940\tWN\t509\tN763SW\t240\t250\t230\t57\t67\tIND\tLAS\t1591\t3\t7\t0\tnull\t0\t10\t0\t0\t0\t47\n2008\t1\t3\t4\t1039\t1040\t1132\t1150\tWN\t535\tN428WN\t233\t250\t219\t-18\t-1\tIND\tLAS\t1591\t7\t7\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t617\t615\t652\t650\tWN\t11\tN689SW\t95\t95\t70\t2\t2\tIND\tMCI\t451\t6\t19\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1620\t1620\t1639\t1655\tWN\t810\tN648SW\t79\t95\t70\t-16\t0\tIND\tMCI\t451\t3\t6\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t706\t700\t916\t915\tWN\t100\tN690SW\t130\t135\t106\t1\t6\tIND\tMCO\t828\t5\t19\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1644\t1510\t1845\t1725\tWN\t1333\tN334SW\t121\t135\t107\t80\t94\tIND\tMCO\t828\t6\t8\t0\tnull\t0\t8\t0\t0\t0\t72\n2008\t1\t3\t4\t1426\t1430\t1426\t1425\tWN\t829\tN476WN\t60\t55\t39\t1\t-4\tIND\tMDW\t162\t9\t12\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t715\t715\t720\t710\tWN\t1016\tN765SW\t65\t55\t37\t10\t0\tIND\tMDW\t162\t7\t21\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1702\t1700\t1651\t1655\tWN\t1827\tN420WN\t49\t55\t35\t-4\t2\tIND\tMDW\t162\t4\t10\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1029\t1020\t1021\t1010\tWN\t2272\tN263WN\t52\t50\t37\t11\t9\tIND\tMDW\t162\t6\t9\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1452\t1425\t1640\t1625\tWN\t675\tN286WN\t228\t240\t213\t15\t27\tIND\tPHX\t1489\t7\t8\t0\tnull\t0\t3\t0\t0\t0\t12\n2008\t1\t3\t4\t754\t745\t940\t955\tWN\t1144\tN778SW\t226\t250\t205\t-15\t9\tIND\tPHX\t1489\t5\t16\t0\tnull\t0\tNA\tNA\tNA\tNA\tNA\n2008\t1\t3\t4\t1323\t1255\t1526\t1510\tWN\t4\tN674AA\t123\t135\t110\t16\t28\tIND\tTPA\t838\t4\t9\t0\tnull\t0\t0\t0\t0\t0\t16\n2008\t1\t3\t4\t1416\t1325\t1512\t1435\tWN\t54\tN643SW\t56\t70\t49\t37\t51\tISP\tBWI\t220\t2\t5\t0\tnull\t0\t12\t0\t0\t0\t25\n"}]}},{"title":"Register a User Defined Function (UDF)","text":"%spark\n\n// Register a helper UDF to find delayed flights\n// Note that this is a UDF specific for use with the sparkSession\n\n// Assume:\n//  if ArrDelay is not available then Delayed = False\n//  if ArrDelay > 15 min then Delayed = True else False\n\nspark.udf.register(\"isDelayedUDF\", (time: String) => if (time == \"NA\") 0 else if (time.toInt > 15) 1 else 0)","dateUpdated":"2018-04-24T14:56:42-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946768_-1603030419","id":"20160410-003138_40384312","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4411","user":"anonymous","dateFinished":"2018-04-24T14:56:42-0400","dateStarted":"2018-04-24T14:56:42-0400","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res32: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,IntegerType,Some(List(StringType)))\n"}]}},{"title":"Compare Total Number of Delayed Flights by Carrier","text":"%sql\n--- Compare Total Number of Delayed Flights by Carrier\nSELECT UniqueCarrier, SUM(isDelayedUDF(DepDelay)) AS NumDelays FROM flightsView GROUP BY UniqueCarrier","dateUpdated":"2018-04-24T14:56:46-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"title":true,"results":[{"graph":{"mode":"pieChart","height":296,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"NumDelays","index":1,"aggr":"sum"}],"groups":[],"scatter":{"yAxis":{"name":"NumDelays","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946769_-1603415168","id":"20160410-003138_134299332","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4412","user":"anonymous","dateFinished":"2018-04-24T14:56:46-0400","dateStarted":"2018-04-24T14:56:46-0400","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"UniqueCarrier\tNumDelays\nXE\t1014\nWN\t18573\n"}]}},{"title":"Compare Total Delayed Time (min) by Carrier","text":"%sql\n--- Compare Total Delayed Time (min) by Carrier\nSELECT UniqueCarrier, SUM(DepDelay) AS TotalTimeDelay FROM flightsView GROUP BY UniqueCarrier","dateUpdated":"2018-04-24T14:56:47-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"editorMode":"ace/mode/sql","colWidth":6,"editorHide":false,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"TotalTimeDelay","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"UniqueCarrier","index":0,"aggr":"sum"},"yAxis":{"name":"TotalTimeDelay","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946769_-1603415168","id":"20160410-003138_163559927","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4413","user":"anonymous","dateFinished":"2018-04-24T14:56:48-0400","dateStarted":"2018-04-24T14:56:47-0400","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"UniqueCarrier\tTotalTimeDelay\nXE\t47505.0\nWN\t978547.0\n"}]}},{"title":"Find Average Distance Travelled by Carrier","text":"%sql\n--- Find Average Distance Travelled by Carrier\nSELECT UniqueCarrier, avg(Distance) AS AvgDistanceTraveled FROM flightsView GROUP BY UniqueCarrier ORDER BY AvgDistanceTraveled DESC","dateUpdated":"2018-04-24T14:54:56-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"keys":[{"name":"UniqueCarrier","index":0,"aggr":"sum"}],"values":[{"name":"AvgDistanceTraveled","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"UniqueCarrier","index":0,"aggr":"sum"},"yAxis":{"name":"AvgDistanceTraveled","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946769_-1603415168","id":"20160410-003138_172624929","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4414"},{"title":"Find Out When Most Flights Get Delayed by Day of Week","text":"%sql\n\nSELECT DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY DayOfWeek, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END\nORDER BY DayOfWeek","dateUpdated":"2018-04-24T14:56:52-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"DayOfWeek","index":0,"aggr":"sum"}],"values":[{"name":"Count","index":2,"aggr":"sum"}],"groups":[{"name":"Delay","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"DayOfWeek","index":0,"aggr":"sum"},"yAxis":{"name":"Delay","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946769_-1603415168","id":"20160410-003138_56774606","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4415","user":"anonymous","dateFinished":"2018-04-24T14:56:53-0400","dateStarted":"2018-04-24T14:56:52-0400","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"DayOfWeek\tDelay\tCount\n1\tok\t11863\n1\tdelayed\t2656\n2\tdelayed\t1799\n2\tok\t12911\n3\tok\t13260\n3\tdelayed\t1434\n4\tok\t12271\n4\tdelayed\t4808\n5\tok\t11003\n5\tdelayed\t3514\n6\tdelayed\t1878\n6\tok\t9407\n7\tdelayed\t3498\n7\tok\t9698\n"}]}},{"title":"Find Out When Most Flights Get Delayed by Hour","text":"%sql\n\nSELECT CAST(CRSDepTime / 100 AS INT) AS Hour, CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END AS Delay, COUNT(1) AS Count\nFROM flightsView\nGROUP BY CAST(CRSDepTime / 100 AS INT), CASE WHEN isDelayedUDF(DepDelay) = 1 THEN 'delayed' ELSE 'ok' END\nORDER BY Hour","dateUpdated":"2018-04-24T14:57:30-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"editorMode":"ace/mode/sql","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"keys":[{"name":"Hour","index":0,"aggr":"sum"}],"values":[{"name":"Count","index":2,"aggr":"sum"}],"groups":[{"name":"Delay","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Hour","index":0,"aggr":"sum"},"yAxis":{"name":"Delay","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946769_-1603415168","id":"20160410-003138_728063774","dateCreated":"2018-04-24T14:35:46-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4416","user":"anonymous","dateFinished":"2018-04-24T14:56:57-0400","dateStarted":"2018-04-24T14:56:56-0400","results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Hour\tDelay\tCount\n6\tdelayed\t208\n6\tok\t6126\n7\tdelayed\t372\n7\tok\t7274\n8\tok\t5956\n8\tdelayed\t547\n9\tok\t5861\n9\tdelayed\t761\n10\tok\t5783\n10\tdelayed\t903\n11\tdelayed\t986\n11\tok\t5115\n12\tok\t5174\n12\tdelayed\t1128\n13\tdelayed\t1346\n13\tok\t5225\n14\tdelayed\t1335\n14\tok\t4434\n15\tok\t4818\n15\tdelayed\t1562\n16\tok\t4810\n16\tdelayed\t1750\n17\tok\t4632\n17\tdelayed\t1802\n18\tdelayed\t1912\n18\tok\t4720\n19\tdelayed\t2001\n19\tok\t4461\n20\tdelayed\t1684\n20\tok\t3526\n21\tok\t2286\n21\tdelayed\t1194\n22\tok\t212\n22\tdelayed\t96\n"}]}},{"title":"Putting it all together","text":"%md\n\nNow, with all these basic analytics in Part 1 and 2 of this lab, you should have a fairly good idea which flights have the most delays, on which routes, from which airports, at which hour, on which days of the week and months of the year, and be able to start making meaningful predictions yourself. That's the power of using Spark with Zeppelin -- having one powerful environment to perform data munging, wrangling, visualization and more on large datasets.","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>Now, with all these basic analytics in Part 1 and 2 of this lab, you should have a fairly good idea which flights have the most delays, on which routes, from which airports, at which hour, on which days of the week and months of the year, and be able to start making meaningful predictions yourself. That&rsquo;s the power of using Spark with Zeppelin &ndash; having one powerful environment to perform data munging, wrangling, visualization and more on large datasets.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946770_-1602260921","id":"20161017-210202_1567750763","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4417"},{"text":"%md\n\n## Persisting Results / Data\n\nFinally, let's persist some of our results by saving our DataFrames in an optimized file format called ORC.\n","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Persisting Results / Data</h2>\n<p>Finally, let&rsquo;s persist some of our results by saving our DataFrames in an optimized file format called ORC.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946770_-1602260921","id":"20161017-212723_1255606607","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4418"},{"text":"%angular\n\n<h3>Save Modes</h3>\n\n<style>\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n</style>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Mode (Scala/Java)</th>\n    <th>Meaning</th>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.ErrorIfExists (default)</code></td>\n    <td>When saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.</td>\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Append</code></td>\n    <td>When saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Overwrite</code></td>\n    <td>Overwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Ignore</code></td>\n    <td>Ignore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.</td>\n  </tr>\n</table>\n\n</br>\nNote: Save operations can optionally take a <code>SaveMode</code>, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing an <code>Overwrite</code>, the data will be deleted before writing out the new data.","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h3>Save Modes</h3>\n\n<style>\ntable, th, td {\n    border: 1px solid black;\n    border-collapse: collapse;\n}\nth, td {\n    padding: 5px;\n}\n</style>\n\n<table style=\"width:100%\">\n  <tr>\n    <th>Mode (Scala/Java)</th>\n    <th>Meaning</th>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.ErrorIfExists (default)</code></td>\n    <td>When saving a DataFrame to a data source, if data already exists, an exception is expected to be thrown.</td>\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Append</code></td>\n    <td>When saving a DataFrame to a data source, if data/table already exists, contents of the DataFrame are expected to be appended to existing data.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Overwrite</code></td>\n    <td>Overwrite mode means that when saving a DataFrame to a data source, if data/table already exists, existing data is expected to be overwritten by the contents of the DataFrame.</td>\t\t\n  </tr>\n  <tr>\n    <td><code>SaveMode.Ignore</code></td>\n    <td>Ignore mode means that when saving a DataFrame to a data source, if data already exists, the save operation is expected to not save the contents of the DataFrame and to not change the existing data. This is similar to a CREATE TABLE IF NOT EXISTS in SQL.</td>\n  </tr>\n</table>\n\n</br>\nNote: Save operations can optionally take a <code>SaveMode</code>, that specifies how to handle existing data if present. It is important to realize that these save modes do not utilize any locking and are not atomic. Additionally, when performing an <code>Overwrite</code>, the data will be deleted before writing out the new data."}]},"apps":[],"jobName":"paragraph_1524594946770_-1602260921","id":"20160410-003138_206029012","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4419"},{"title":"Save to ORC file","text":"%spark\n\nimport org.apache.spark.sql.SaveMode\n\n// Save and Overwrite our new DataFrame to an ORC file\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).save(\"flightsWithDelays.orc\")","dateUpdated":"2018-04-24T14:54:20-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946770_-1602260921","id":"20160410-003138_985965720","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4420"},{"title":"What is an ORC file format?","text":"%md\n\nORC (Optimized Row-Column) is a self-describing, type-aware columnar file format designed for Hadoop workloads. It is optimized for large streaming reads, but with integrated support for finding required rows quickly. Storing data in a columnar format lets the reader read, decompress, and process only the values that are required for the current query. Because ORC files are type-aware, the writer chooses the most appropriate encoding for the type and builds an internal index as the file is written. More information [here](https://orc.apache.org/).","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>ORC (Optimized Row-Column) is a self-describing, type-aware columnar file format designed for Hadoop workloads. It is optimized for large streaming reads, but with integrated support for finding required rows quickly. Storing data in a columnar format lets the reader read, decompress, and process only the values that are required for the current query. Because ORC files are type-aware, the writer chooses the most appropriate encoding for the type and builds an internal index as the file is written. More information <a href=\"https://orc.apache.org/\">here</a>.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946770_-1602260921","id":"20161017-103614_1279292421","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4421"},{"title":"Load back from an ORC file","text":"%spark\n\n// Load results back from ORC file\nval test = spark.read.format(\"orc\").load(\"flightsWithDelays.orc\")\n\n// Assert both DataFrames of the same size.\n//   Note that if assertion succeeds no warning messages will be printed\nassert (test.count == flightsWithDelays.count, println(\"Assertion Fail: Files are of different sizes.\"))\n\ntest.show(10)","dateUpdated":"2018-04-24T14:54:22-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"editorMode":"ace/mode/scala","colWidth":12,"editorHide":false,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946771_-1602645670","id":"20160410-003138_1142035788","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4422"},{"text":"%md\n\nWe can also create permanent tables, instead of temporary views, using `saveAsTable`. The resulting table will still exist even after your Spark program has restarted.","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We can also create permanent tables, instead of temporary views, using <code>saveAsTable</code>. The resulting table will still exist even after your Spark program has restarted.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946771_-1602645670","id":"20161017-212315_1033823107","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4423"},{"title":"Save DataFrame as Permanent Table","text":"%spark\n\nflightsWithDelays.write.format(\"orc\").mode(SaveMode.Overwrite).saveAsTable(\"flightswithdelaystbl\")","dateUpdated":"2018-04-24T14:54:25-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","title":true,"results":[],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946771_-1602645670","id":"20161017-212148_1432557096","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4424"},{"title":"Show Tables/Views","text":"%sql\n\nSHOW TABLES\n\n-- Note that flightsWithDelaysTbl is a permanent table instead of a temporary view!","dateUpdated":"2018-04-24T14:54:32-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"tableName","index":0,"aggr":"sum"}],"values":[{"name":"isTemporary","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"tableName","index":0,"aggr":"sum"},"yAxis":{"name":"isTemporary","index":1,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946771_-1602645670","id":"20161017-212228_2044087527","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4425"},{"title":"Querying a Permanent Table","text":"%sql\n\nSELECT COUNT(1) AS Total from flightswithdelaystbl  -- As you can see, there's no difference in querying a temporary view vs a permanent table","dateUpdated":"2018-04-24T14:54:44-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"sql"},"colWidth":12,"editorMode":"ace/mode/sql","title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"Total","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"Total","index":0,"aggr":"sum"}}}}],"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946771_-1602645670","id":"20161017-212847_790820933","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4426"},{"title":"Final Words","text":"%md\n\nThis should get you started working in Scala with DataFrame, Dataset and SQL Spark APIs that are part of the Spark SQL Module. You should now have the basic tools and code samples to start working on your own data sets: from brining in/downloading datasets, to moving them from local storage to HDFS, to transforming datasets into Spark DataFrames/Datasets/temporary views, querying the data, performing basic calcuations, visualizing, and finally persisiting your results. That's a great start!","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>This should get you started working in Scala with DataFrame, Dataset and SQL Spark APIs that are part of the Spark SQL Module. You should now have the basic tools and code samples to start working on your own data sets: from brining in/downloading datasets, to moving them from local storage to HDFS, to transforming datasets into Spark DataFrames/Datasets/temporary views, querying the data, performing basic calcuations, visualizing, and finally persisiting your results. That&rsquo;s a great start!</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946772_-1604569414","id":"20161017-214817_1787337666","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4427"},{"title":"Additional Resources","text":"%md\n\nWe hope you've enjoyed this introductory lab. Below are additional resources that you should find useful:\n\n1. [Hortonworks Apache Spark Tutorials](http://hortonworks.com/tutorials/#tuts-developers) are your natural next step where you can explore Spark in more depth.\n2. [Hortonworks Community Connection (HCC)](https://community.hortonworks.com/spaces/85/data-science.html?type=question) is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.\n3. [Hortonworks Apache Spark Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html) - official Spark documentation.\n4. [Hortonworks Apache Zeppelin Docs](http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html) - official Zeppelin documentation.","dateUpdated":"2018-04-24T14:35:46-0400","config":{"tableHide":false,"editorSetting":{"editOnDblClick":true,"language":"markdown"},"editorMode":"ace/mode/markdown","colWidth":10,"editorHide":true,"title":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We hope you&rsquo;ve enjoyed this introductory lab. Below are additional resources that you should find useful:</p>\n<ol>\n  <li><a href=\"http://hortonworks.com/tutorials/#tuts-developers\">Hortonworks Apache Spark Tutorials</a> are your natural next step where you can explore Spark in more depth.</li>\n  <li><a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\">Hortonworks Community Connection (HCC)</a> is a great resource for questions and answers on Spark, Data Analytics/Science, and many more Big Data topics.</li>\n  <li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_spark-component-guide/content/ch_developing-spark-apps.html\">Hortonworks Apache Spark Docs</a> - official Spark documentation.</li>\n  <li><a href=\"http://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.5.0/bk_zeppelin-component-guide/content/ch_using_zeppelin.html\">Hortonworks Apache Zeppelin Docs</a> - official Zeppelin documentation.</li>\n</ol>\n</div>"}]},"apps":[],"jobName":"paragraph_1524594946772_-1604569414","id":"20160410-003138_2048237853","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4428"},{"text":"%angular\n</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{},"editorMode":"ace/mode/scala","colWidth":2,"editorHide":true,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"</br>\n<center>\n<a href=\"https://community.hortonworks.com/spaces/85/data-science.html?type=question\" target='_blank'>\n  <img src=\"http://hortonworks.com/wp-content/uploads/2016/03/logo-hcc.png\" alt=\"HCC\" style=\"width:125px;height:125px;border:0;\" align=\"middle\">\n</a>\n</center>"}]},"apps":[],"jobName":"paragraph_1524594946772_-1604569414","id":"20160410-003138_1663715025","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4429"},{"text":"","dateUpdated":"2018-04-24T14:35:46-0400","config":{"editorSetting":{"editOnDblClick":false,"language":"scala"},"colWidth":12,"editorMode":"ace/mode/scala","results":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1524594946772_-1604569414","id":"20161018-143604_1206436852","dateCreated":"2018-04-24T14:35:46-0400","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4430"}],"name":"Lab 2 / Predict Airline Delays - Scala","id":"2DBH7NVGD","angularObjects":{"2D7UB5DWN:shared_process":[],"2D77X3KB6:shared_process":[],"2D78CY7V1:shared_process":[],"2D9TR66MS:shared_process":[],"2D8A6P2VJ:shared_process":[],"2D763B6N4:shared_process":[],"2D8XDFXUS:shared_process":[],"2D9YUB6X9:shared_process":[],"2D89XEJVA:shared_process":[],"2D9TNV8XZ:shared_process":[],"2D9HGKTCK:shared_process":[],"2D9ECNFF2:shared_process":[],"2D6CZP8YB:shared_process":[],"2D92BFGM4:shared_process":[],"2D9KC5YRP:shared_process":[],"2D99TYCWV:shared_process":[],"2D8DWKU88:shared_process":[],"2D7YQZDKH:shared_process":[],"2D9TZV2HZ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}